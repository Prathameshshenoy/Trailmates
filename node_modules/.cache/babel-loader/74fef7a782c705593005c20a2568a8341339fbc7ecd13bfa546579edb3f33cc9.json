{"ast":null,"code":"var _jsxFileName = \"/Users/prathamesh_shenoy/Desktop/hikingapp/src/pages/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TrailCard from '../../components/TrailCard/TrailCard';\nimport Button from '../../components/Button/button';\nimport CitySelector from '../../components/CitySelector/Cityselector';\nimport './Home.css';\nimport { locationMapping } from '../../data/location_mapping';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [showAll, setShowAll] = useState(false);\n  const [location, setLocation] = useState('');\n  const [trails, setTrails] = useState([]);\n  const [cityModal, setCityModal] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Function to fetch trails based on city\n  const fetchTrails = async city => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${city}`);\n      if (!response.ok) throw new Error('Network response was not ok');\n      const trails = await response.json();\n      const approvedTrails = trails.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      setError('Failed to fetch trails. Please try again later.');\n    }\n  };\n  useEffect(() => {\n    // Retrieve city from localStorage if it exists\n    const savedCity = localStorage.getItem('selectedCity');\n    if (savedCity) {\n      setLocation(savedCity);\n      fetchTrails(savedCity);\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`).then(response => response.json()).then(data => {\n            const city = data.city || data.locality || data.principalSubdivision || \"Your Location\";\n            setLocation(city);\n            fetchTrails(city);\n          });\n        }, () => {\n          setCityModal(true);\n        });\n      } else {\n        setCityModal(true);\n      }\n    }\n  }, []);\n  const handleCityChange = async city => {\n    setLocation(city);\n    localStorage.setItem('selectedCity', city); // Save the selected city to localStorage\n\n    // Directly fetch the trails for the new city after updating the location state\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${city}`);\n      const trails = await response.json();\n      const approvedTrails = trails.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      setError('Failed to fetch trails. Please try again later.');\n    }\n    setCityModal(false);\n  };\n  const displayedTrails = trails.filter(trail => trail.name.toLowerCase().includes(searchTerm.toLowerCase())).slice(0, showAll ? undefined : 4);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-banner\",\n      style: {\n        backgroundImage: `url(http://localhost:8000/images/search2.jpg)`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Find Your Next Adventure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Explore new trails and join our community of hikers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search for trails...\",\n            className: \"search-input\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trail-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Trails in \", location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-msg\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trail-grid\",\n        children: displayedTrails.length > 0 ? displayedTrails.map(trail => /*#__PURE__*/_jsxDEV(TrailCard, {\n          trail: trail\n        }, trail._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No trails found in your area.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), trails.length > 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"load-more\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          onClick: () => setShowAll(!showAll),\n          className: \"load-more-button\",\n          children: showAll ? 'Show Less' : 'Show More'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), cityModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(CitySelector, {\n        cities: Object.keys(locationMapping),\n        onSelectCity: handleCityChange,\n        onClose: () => setCityModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"41ySPae/HODrj5Py6ZT8bpfGmWw=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","TrailCard","Button","CitySelector","locationMapping","jsxDEV","_jsxDEV","Home","_s","showAll","setShowAll","location","setLocation","trails","setTrails","cityModal","setCityModal","error","setError","searchTerm","setSearchTerm","fetchTrails","city","response","fetch","ok","Error","json","approvedTrails","filter","trail","approved","savedCity","localStorage","getItem","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","then","data","locality","principalSubdivision","handleCityChange","setItem","displayedTrails","name","toLowerCase","includes","slice","undefined","className","children","style","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","length","map","_id","variant","onClick","cities","Object","keys","onSelectCity","onClose","_c","$RefreshReg$"],"sources":["/Users/prathamesh_shenoy/Desktop/hikingapp/src/pages/Home/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TrailCard from '../../components/TrailCard/TrailCard';\nimport Button from '../../components/Button/button';\nimport CitySelector from '../../components/CitySelector/Cityselector';\nimport './Home.css';\nimport { locationMapping } from '../../data/location_mapping';\n\nconst Home = () => {\n  const [showAll, setShowAll] = useState(false);\n  const [location, setLocation] = useState('');\n  const [trails, setTrails] = useState([]);\n  const [cityModal, setCityModal] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Function to fetch trails based on city\n  const fetchTrails = async (city) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${city}`);\n      if (!response.ok) throw new Error('Network response was not ok');\n      const trails = await response.json();\n      const approvedTrails = trails.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      setError('Failed to fetch trails. Please try again later.');\n    }\n  };\n\n  useEffect(() => {\n    // Retrieve city from localStorage if it exists\n    const savedCity = localStorage.getItem('selectedCity');\n\n    if (savedCity) {\n      setLocation(savedCity);\n      fetchTrails(savedCity);\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`)\n            .then(response => response.json())\n            .then(data => {\n              const city = data.city || data.locality || data.principalSubdivision || \"Your Location\";\n              setLocation(city);\n              fetchTrails(city);\n            });\n        }, () => {\n          setCityModal(true);\n        });\n      } else {\n        setCityModal(true);\n      }\n    }\n  }, []);\n\n  const handleCityChange = async (city) => {\n    setLocation(city);\n    localStorage.setItem('selectedCity', city); // Save the selected city to localStorage\n  \n    // Directly fetch the trails for the new city after updating the location state\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${city}`);\n      const trails = await response.json();\n      const approvedTrails = trails.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      setError('Failed to fetch trails. Please try again later.');\n    }\n    setCityModal(false);\n  };\n  \n\n  const displayedTrails = trails\n    .filter(trail => trail.name.toLowerCase().includes(searchTerm.toLowerCase()))\n    .slice(0, showAll ? undefined : 4);\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"main-banner\" style={{ backgroundImage: `url(http://localhost:8000/images/search2.jpg)` }}>\n        <div className=\"banner-content\">\n          <h1>Find Your Next Adventure</h1>\n          <p>Explore new trails and join our community of hikers</p>\n          \n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              placeholder=\"Search for trails...\"\n              className=\"search-input\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"trail-list\">\n        <h2>Trails in {location}</h2>\n        {error && <p className=\"error-msg\">{error}</p>}\n        \n        <div className=\"trail-grid\">\n          {displayedTrails.length > 0 ? (\n            displayedTrails.map(trail => (\n              <TrailCard key={trail._id} trail={trail} />\n            ))\n          ) : (\n            <p>No trails found in your area.</p>\n          )}\n        </div>\n        \n        {trails.length > 4 && (\n          <div className=\"load-more\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAll(!showAll)}\n              className=\"load-more-button\"\n            >\n              {showAll ? 'Show Less' : 'Show More'}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {cityModal && (\n        <div className=\"modal-overlay\">\n          <CitySelector\n            cities={Object.keys(locationMapping)}\n            onSelectCity={handleCityChange}\n            onClose={() => setCityModal(false)}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}