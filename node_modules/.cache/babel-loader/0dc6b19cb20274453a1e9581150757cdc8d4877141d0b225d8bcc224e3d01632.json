{"ast":null,"code":"var _jsxFileName = \"/Users/prathamesh_shenoy/Desktop/hikingapp/src/pages/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TrailCard from '../../components/TrailCard/TrailCard';\nimport Button from '../../components/Button/button';\nimport CitySelector from '../../components/CitySelector/Cityselector';\nimport Navbar from '../../components/Navbar/Navbar'; // Ensure Navbar is imported\nimport './Home.css';\nimport { locationMapping } from '../../data/location_mapping';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [showAll, setShowAll] = useState(false);\n  const [location, setLocation] = useState('');\n  const [trails, setTrails] = useState([]);\n  const [cityModal, setCityModal] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Function to fetch trails based on city\n  const fetchTrails = async city => {\n    if (!city) return;\n    setIsLoading(true);\n    setError('');\n    console.log('Fetching trails for:', city);\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${encodeURIComponent(city)}`);\n      if (!response.ok) throw new Error('Network response was not ok');\n      const data = await response.json();\n      const approvedTrails = data.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      console.error('Error fetching trails:', error);\n      setError('Failed to fetch trails. Please try again later.');\n      setTrails([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Effect to check saved city in localStorage and fetch trails on mount\n  useEffect(() => {\n    const savedCity = localStorage.getItem('selectedCity');\n    if (savedCity) {\n      setLocation(savedCity);\n      fetchTrails(savedCity);\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`).then(response => response.json()).then(data => {\n            const city = data.city || data.locality || data.principalSubdivision || \"Your Location\";\n            setLocation(city);\n            fetchTrails(city);\n          });\n        }, () => {\n          setCityModal(true);\n        });\n      } else {\n        setCityModal(true);\n      }\n    }\n  }, []); // Runs only on mount\n\n  // Effect to fetch trails when location state changes\n  useEffect(() => {\n    if (location) {\n      fetchTrails(location); // Fetch trails when location changes\n    }\n  }, [location]);\n\n  // Handler for city change - set new city and fetch trails\n  const handleCityChange = async city => {\n    setLocation(city); // Update location state immediately\n    localStorage.setItem('selectedCity', city); // Save to localStorage\n    setCityModal(false); // Close the modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      location: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-banner\",\n      style: {\n        backgroundImage: `url(http://localhost:8000/images/search2.jpg)`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Find Your Next Adventure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Explore new trails and join our community of hikers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search for trails...\",\n            className: \"search-input\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trail-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Trails in \", location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-msg\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading trails...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trail-grid\",\n        children: trails.length > 0 ? trails.map(trail => /*#__PURE__*/_jsxDEV(TrailCard, {\n          trail: trail\n        }, trail._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No trails found in your area.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), cityModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(CitySelector, {\n        cities: Object.keys(locationMapping),\n        onSelectCity: handleCityChange,\n        onClose: () => setCityModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"2wLgYwC6ghUqZytLUomp/pNixT0=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","TrailCard","Button","CitySelector","Navbar","locationMapping","jsxDEV","_jsxDEV","Home","_s","showAll","setShowAll","location","setLocation","trails","setTrails","cityModal","setCityModal","error","setError","searchTerm","setSearchTerm","isLoading","setIsLoading","fetchTrails","city","console","log","response","fetch","encodeURIComponent","ok","Error","data","json","approvedTrails","filter","trail","approved","savedCity","localStorage","getItem","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","then","locality","principalSubdivision","handleCityChange","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","type","placeholder","value","onChange","e","target","length","map","_id","cities","Object","keys","onSelectCity","onClose","_c","$RefreshReg$"],"sources":["/Users/prathamesh_shenoy/Desktop/hikingapp/src/pages/Home/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TrailCard from '../../components/TrailCard/TrailCard';\nimport Button from '../../components/Button/button';\nimport CitySelector from '../../components/CitySelector/Cityselector';\nimport Navbar from '../../components/Navbar/Navbar'; // Ensure Navbar is imported\nimport './Home.css';\nimport { locationMapping } from '../../data/location_mapping';\n\nconst Home = () => {\n  const [showAll, setShowAll] = useState(false);\n  const [location, setLocation] = useState('');\n  const [trails, setTrails] = useState([]);\n  const [cityModal, setCityModal] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Function to fetch trails based on city\n  const fetchTrails = async (city) => {\n    if (!city) return;\n\n    setIsLoading(true);\n    setError('');\n    console.log('Fetching trails for:', city);\n\n    try {\n      const response = await fetch(`http://localhost:8000/api/trails?city=${encodeURIComponent(city)}`);\n      if (!response.ok) throw new Error('Network response was not ok');\n      \n      const data = await response.json();\n      const approvedTrails = data.filter(trail => trail.approved === true);\n      setTrails(approvedTrails);\n    } catch (error) {\n      console.error('Error fetching trails:', error);\n      setError('Failed to fetch trails. Please try again later.');\n      setTrails([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Effect to check saved city in localStorage and fetch trails on mount\n  useEffect(() => {\n    const savedCity = localStorage.getItem('selectedCity');\n    if (savedCity) {\n      setLocation(savedCity);\n      fetchTrails(savedCity);\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const { latitude, longitude } = position.coords;\n          fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`)\n            .then(response => response.json())\n            .then(data => {\n              const city = data.city || data.locality || data.principalSubdivision || \"Your Location\";\n              setLocation(city);\n              fetchTrails(city);\n            });\n        }, () => {\n          setCityModal(true);\n        });\n      } else {\n        setCityModal(true);\n      }\n    }\n  }, []); // Runs only on mount\n\n  // Effect to fetch trails when location state changes\n  useEffect(() => {\n    if (location) {\n      fetchTrails(location); // Fetch trails when location changes\n    }\n  }, [location]);\n\n  // Handler for city change - set new city and fetch trails\n  const handleCityChange = async (city) => {\n    setLocation(city);  // Update location state immediately\n    localStorage.setItem('selectedCity', city);  // Save to localStorage\n    setCityModal(false);  // Close the modal\n  };\n\n  return (\n    <div className=\"home-container\">\n      {/* Pass location as a prop to Navbar */}\n      <Navbar location={location} />\n      <div className=\"main-banner\" style={{ backgroundImage: `url(http://localhost:8000/images/search2.jpg)` }}>\n        <div className=\"banner-content\">\n          <h1>Find Your Next Adventure</h1>\n          <p>Explore new trails and join our community of hikers</p>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              placeholder=\"Search for trails...\"\n              className=\"search-input\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Trails and other content */}\n      <div className=\"trail-list\">\n        <h2>Trails in {location}</h2>\n        {error && <p className=\"error-msg\">{error}</p>}\n\n        {isLoading ? (\n          <p>Loading trails...</p>\n        ) : (\n          <div className=\"trail-grid\">\n            {trails.length > 0 ? (\n              trails.map(trail => (\n                <TrailCard key={trail._id} trail={trail} />\n              ))\n            ) : (\n              <p>No trails found in your area.</p>\n            )}\n          </div>\n        )}\n      </div>\n\n      {cityModal && (\n        <div className=\"modal-overlay\">\n          <CitySelector\n            cities={Object.keys(locationMapping)}\n            onSelectCity={handleCityChange}\n            onClose={() => setCityModal(false)}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}